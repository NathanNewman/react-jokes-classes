{"version":3,"sources":["Joke.js","JokeList.js","App.js","registerServiceWorker.js","index.js"],"names":["Joke","_Component","_inherits","_super","_createSuper","props","_this","_classCallCheck","call","upVote","bind","_assertThisInitialized","downVote","_createClass","key","value","_this$props","this","vote","id","_this$props2","_this$props3","votes","text","_jsxs","className","children","_jsx","onClick","Component","JokeList","state","jokes","generateNewJokes","length","getJokes","_getJokes","_asyncToGenerator","_regeneratorRuntime","mark","_callee","numJokesToGet","j","seenJokes","res","_res$data","jokeObj","wrap","_context","prev","next","Set","axios","get","headers","Accept","sent","data","status","_objectWithoutProperties","_excluded","has","console","error","add","push","_objectSpread","setState","t0","log","stop","apply","arguments","delta","st","map","_this2","sortedJokes","_toConsumableArray","sort","a","b","joke","defaultProps","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"uUA8CeA,EA3CL,SAAAC,GAAAC,YAAAF,EAAAC,GAAA,IAAAE,EAAAC,YAAAJ,GACR,SAAAA,EAAYK,GAAQ,IAADC,EAKwB,OALxBC,YAAA,KAAAP,IACjBM,EAAAH,EAAAK,KAAA,KAAMH,IAGDI,OAASH,EAAKG,OAAOC,KAAIC,YAAAL,IAC9BA,EAAKM,SAAWN,EAAKM,SAASF,KAAIC,YAAAL,IAAOA,CAC3C,CAiCC,OA/BDO,YAAAb,EAAA,EAAAc,IAAA,SAAAC,MACA,WACE,IAAAC,EAAqBC,KAAKZ,OAC1Ba,EADYF,EAAJE,MAAQF,EAAFG,GACL,EACX,GAEA,CAAAL,IAAA,WAAAC,MACA,WACE,IAAAK,EAAqBH,KAAKZ,OAC1Ba,EADYE,EAAJF,MAAQE,EAAFD,IACJ,EACZ,GAAC,CAAAL,IAAA,SAAAC,MAED,WACE,IAAAM,EAAwBJ,KAAKZ,MAArBiB,EAAKD,EAALC,MAAOC,EAAIF,EAAJE,KACf,OACEC,eAAA,OAAKC,UAAU,OAAMC,SAAA,CACnBF,eAAA,OAAKC,UAAU,gBAAeC,SAAA,CAC5BC,cAAA,UAAQC,QAASX,KAAKR,OAAOiB,SAC3BC,cAAA,KAAGF,UAAU,uBAGfE,cAAA,UAAQC,QAASX,KAAKL,SAASc,SAC7BC,cAAA,KAAGF,UAAU,yBAGdH,KAGHK,cAAA,OAAKF,UAAU,YAAWC,SAAEH,MAGlC,KAACvB,CAAA,CAxCO,CAAS6B,a,qBCEbC,EAAQ,SAAA7B,GAAAC,YAAA4B,EAAA7B,GAAA,IAAAE,EAAAC,YAAA0B,GACZ,SAAAA,EAAYzB,GAAQ,IAADC,EAMiB,OANjBC,YAAA,KAAAuB,IACjBxB,EAAAH,EAAAK,KAAA,KAAMH,IACD0B,MAAQ,CACXC,MAAO,IAET1B,EAAK2B,iBAAmB3B,EAAK2B,iBAAiBvB,KAAIC,YAAAL,IAClDA,EAAKY,KAAOZ,EAAKY,KAAKR,KAAIC,YAAAL,IAAQA,CACpC,CAsEC,OAtEAO,YAAAiB,EAAA,EAAAhB,IAAA,oBAAAC,MAED,WACkC,IAA5BE,KAAKc,MAAMC,MAAME,QACnBjB,KAAKkB,UAET,GAAC,CAAArB,IAAA,WAAAC,MAAA,eAAAqB,EAAAC,YAAAC,cAAAC,MAED,SAAAC,IAAA,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAR,cAAAS,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACUT,EAAkBxB,KAAKZ,MAAvBoC,cACJC,EAAI,GACJC,EAAY,IAAIQ,IAAOH,EAAAC,KAAA,cAElBP,EAAER,OAASO,GAAa,CAAAO,EAAAE,KAAA,gBAAAF,EAAAE,KAAA,EACbE,IAAMC,IAAI,6BAA8B,CACtDC,QAAS,CAAEC,OAAQ,sBAClB,KAAD,EAFEX,EAAGI,EAAAQ,KAEHX,EACyBD,EAAIa,KAArBZ,EAANa,OAAWZ,EAAOa,YAAAd,EAAAe,GAEnBjB,EAAUkB,IAAIf,EAAQ3B,IAKzB2C,QAAQC,MAAM,qBAHdpB,EAAUqB,IAAIlB,EAAQ3B,IACtBuB,EAAEuB,KAAIC,wBAAC,CAAC,EAAIpB,GAAO,IAAExB,MAAO,MAG7B0B,EAAAE,KAAA,gBAEHjC,KAAKkD,SAAS,CAAEnC,MAAOU,IAAMM,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAoB,GAAApB,EAAA,SAE7Bc,QAAQO,IAAGrB,EAAAoB,IAAK,yBAAApB,EAAAsB,OAAA,GAAA9B,EAAA,mBAEnB,yBAAAJ,EAAAmC,MAAA,KAAAC,UAAA,EAzBA,IAyBA,CAAA1D,IAAA,mBAAAC,MAED,WACEE,KAAKkB,UACP,GAAC,CAAArB,IAAA,OAAAC,MAED,SAAKI,EAAIsD,GACPxD,KAAKkD,UAAS,SAACO,GAAE,MAAM,CACrB1C,MAAO0C,EAAG1C,MAAM2C,KAAI,SAACjC,GAAC,OACpBA,EAAEvB,KAAOA,EAAE+C,wBAAA,GAAQxB,GAAC,IAAEpB,MAAOoB,EAAEpB,MAAQmD,IAAU/B,CAAC,IAErD,GACH,GAAC,CAAA5B,IAAA,SAAAC,MAED,WAAU,IAAD6D,EAAA,KACP,GAAI3D,KAAKc,MAAMC,MAAME,OAAQ,CAE3B,IAAI2C,EAAcC,YAAI7D,KAAKc,MAAMC,OAAO+C,MAAK,SAACC,EAAGC,GAAC,OAAKA,EAAE3D,MAAQ0D,EAAE1D,KAAK,IAExE,OACEE,eAAA,OAAKC,UAAU,WAAUC,SAAA,CACvBC,cAAA,UAAQF,UAAU,mBAAmBG,QAASX,KAAKgB,iBAAiBP,SAAC,kBAIpEmD,EAAYF,KAAI,SAACjC,GAAC,OACjBf,cAAC3B,EAAI,CACHuB,KAAMmB,EAAEwC,KAER/D,GAAIuB,EAAEvB,GACNG,MAAOoB,EAAEpB,MACTJ,KAAM0D,EAAK1D,MAHNwB,EAAEvB,GAIP,MAIV,CAEA,OAAO,IACT,KAACW,CAAA,CA9EW,CAASD,aAkFvBC,EAASqD,aAAe,CACtB1C,cAAe,IAGFX,QChFAsD,MARf,WACE,OACEzD,cAAA,OAAKF,UAAU,MAAKC,SAClBC,cAACG,EAAQ,KAGf,ECCMuD,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBpE,QACf8D,UAAUC,cAAcQ,WAK1BxC,QAAQO,IAAI,6CAKZP,QAAQO,IAAI,sCAGlB,CACF,CACF,IACCkC,OAAM,SAAAxC,GACLD,QAAQC,MAAM,4CAA6CA,EAC7D,GACJ,CC3EAyC,IAASC,OAAO9E,cAACyD,EAAG,IAAKsB,SAASC,eAAe,SDclC,WACb,GAA6C,kBAAmBd,UAAW,CAGzE,GADkB,IAAIe,IAAIC,uBAAwBtB,OAAOC,UAC3CsB,SAAWvB,OAAOC,SAASsB,OAIvC,OAGFvB,OAAOwB,iBAAiB,QAAQ,WAC9B,IAAMnB,EAAK,GAAAoB,OAAMH,uBAAsB,sBAEnCxB,IAiDV,SAAiCO,GAE/BqB,MAAMrB,GACHI,MAAK,SAAAkB,GAGkB,MAApBA,EAASxD,SACuD,IAAhEwD,EAAS5D,QAAQD,IAAI,gBAAgB8D,QAAQ,cAG7CtB,UAAUC,cAAcsB,MAAMpB,MAAK,SAAAC,GACjCA,EAAaoB,aAAarB,MAAK,WAC7BT,OAAOC,SAAS8B,QAClB,GACF,IAGA3B,EAAgBC,EAEpB,IACCW,OAAM,WACLzC,QAAQO,IACN,gEAEJ,GACJ,CAxEQkD,CAAwB3B,GAIxBC,UAAUC,cAAcsB,MAAMpB,MAAK,WACjClC,QAAQO,IACN,2GAGJ,KAGAsB,EAAgBC,EAEpB,GACF,CACF,CC7CA4B,E","file":"static/js/main.9d7bd06d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Joke.css\";\n\nclass Joke extends Component {\n  constructor(props) {\n    super(props);\n\n    // Bind the methods to the instance of the class\n    this.upVote = this.upVote.bind(this);\n    this.downVote = this.downVote.bind(this);\n  }\n\n  // Method to handle upvoting a joke\n  upVote() {\n    const { vote, id } = this.props;\n    vote(id, +1);\n  }\n\n  // Method to handle downvoting a joke\n  downVote() {\n    const { vote, id } = this.props;\n    vote(id, -1);\n  }\n\n  render() {\n    const { votes, text } = this.props;\n    return (\n      <div className=\"Joke\">\n        <div className=\"Joke-votearea\">\n          <button onClick={this.upVote}>\n            <i className=\"fas fa-thumbs-up\" />\n          </button>\n\n          <button onClick={this.downVote}>\n            <i className=\"fas fa-thumbs-down\" />\n          </button>\n\n          {votes}\n        </div>\n\n        <div className=\"Joke-text\">{text}</div>\n      </div>\n    );\n  }\n}\n\nexport default Joke;\n\n// import React from \"react\";\n// import \"./Joke.css\";\n\n// function Joke({ vote, votes, text, id }) {\n//   const upVote = () => vote(id, +1);\n//   const downVote = () => vote(id, -1);\n\n//   return (\n//     <div className=\"Joke\">\n//       <div className=\"Joke-votearea\">\n//         <button onClick={upVote}>\n//           <i className=\"fas fa-thumbs-up\" />\n//         </button>\n\n//         <button onClick={downVote}>\n//           <i className=\"fas fa-thumbs-down\" />\n//         </button>\n\n//         {votes}\n//       </div>\n\n//       <div className=\"Joke-text\">{text}</div>\n//     </div>\n//   );\n// }\n\n// export default Joke;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport Joke from \"./Joke\";\nimport \"./JokeList.css\";\n\nclass JokeList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      jokes: [],\n    }; // Initialize state with an empty array to store jokes\n    this.generateNewJokes = this.generateNewJokes.bind(this); // Bind the generateNewJokes function to 'this'\n    this.vote = this.vote.bind(this); // Bind the vote function to 'this'\n  }\n\n  componentDidMount() {\n    if (this.state.jokes.length === 0) {\n      this.getJokes();\n    } // Fetch jokes when the component mounts if jokes are not already present in state\n  }\n\n  async getJokes() {\n    const { numJokesToGet } = this.props; // Get the number of jokes to fetch from props\n    let j = []; // Create a copy of the current jokes array in state\n    let seenJokes = new Set(); // Create a Set to store the IDs of seen jokes to avoid duplicates\n    try {\n      while (j.length < numJokesToGet) {\n        let res = await axios.get(\"https://icanhazdadjoke.com\", {\n          headers: { Accept: \"application/json\" },\n        }); // Fetch jokes from API until the desired number of jokes is obtained\n        let { status, ...jokeObj } = res.data; // Extract the joke object from the API response, removing the 'status' field\n\n        if (!seenJokes.has(jokeObj.id)) {\n          // Check if the joke is not a duplicate\n          seenJokes.add(jokeObj.id); // Add the joke ID to the Set of seen jokes\n          j.push({ ...jokeObj, votes: 0 }); // Add the joke object to the jokes array in state with an initial vote count of 0\n        } else {\n          console.error(\"duplicate found!\"); // Log an error message if a duplicate joke is found\n        }\n      }\n      this.setState({ jokes: j }); // Update the state with the fetched jokes\n    } catch (e) {\n      console.log(e); // Log any errors that occur during the API request\n    }\n  }\n\n  generateNewJokes() {\n    this.getJokes(); // Call getJokes() to fetch new jokes and update state\n  }\n\n  vote(id, delta) {\n    this.setState((st) => ({\n      jokes: st.jokes.map((j) =>\n        j.id === id ? { ...j, votes: j.votes + delta } : j\n      ),\n    })); // Update the vote count of a joke in state based on the ID and the vote delta (1 or -1)\n  }\n\n  render() {\n    if (this.state.jokes.length) {\n      // Check if there are jokes in state to render\n      let sortedJokes = [...this.state.jokes].sort((a, b) => b.votes - a.votes); // Sort the jokes array in descending order based on vote count\n\n      return (\n        <div className=\"JokeList\">\n          <button className=\"JokeList-getmore\" onClick={this.generateNewJokes}>\n            Get New Jokes\n          </button>\n\n          {sortedJokes.map((j) => (\n            <Joke\n              text={j.joke}\n              key={j.id}\n              id={j.id}\n              votes={j.votes}\n              vote={this.vote}\n            />\n          ))}\n        </div>\n      );\n    }\n\n    return null;\n  }\n}\n\n// Set default props using static defaultProps property\nJokeList.defaultProps = {\n  numJokesToGet: 10, // Set default value for numJokesToGet\n};\n\nexport default JokeList;\n\n// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n// import Joke from \"./Joke\";\n// import \"./JokeList.css\";\n\n// function JokeList({ numJokesToGet = 10 }) {\n//   const [jokes, setJokes] = useState([]);\n\n//   /* get jokes if there are no jokes */\n\n//   useEffect(function() {\n//     async function getJokes() {\n//       let j = [...jokes];\n//       let seenJokes = new Set();\n//       try {\n//         while (j.length < numJokesToGet) {\n//           let res = await axios.get(\"https://icanhazdadjoke.com\", {\n//             headers: { Accept: \"application/json\" }\n//           });\n//           let { status, ...jokeObj } = res.data;\n\n//           if (!seenJokes.has(jokeObj.id)) {\n//             seenJokes.add(jokeObj.id);\n//             j.push({ ...jokeObj, votes: 0 });\n//           } else {\n//             console.error(\"duplicate found!\");\n//           }\n//         }\n//         setJokes(j);\n//       } catch (e) {\n//         console.log(e);\n//       }\n//     }\n\n//     if (jokes.length === 0) getJokes();\n//   }, [jokes, numJokesToGet]);\n\n//   /* empty joke list and then call getJokes */\n\n//   function generateNewJokes() {\n//     setJokes([]);\n//   }\n\n//   /* change vote for this id by delta (+1 or -1) */\n\n//   function vote(id, delta) {\n//     setJokes(allJokes =>\n//       allJokes.map(j => (j.id === id ? { ...j, votes: j.votes + delta } : j))\n//     );\n//   }\n\n//   /* render: either loading spinner or list of sorted jokes. */\n\n//   if (jokes.length) {\n//     let sortedJokes = [...jokes].sort((a, b) => b.votes - a.votes);\n\n//     return (\n//       <div className=\"JokeList\">\n//         <button className=\"JokeList-getmore\" onClick={generateNewJokes}>\n//           Get New Jokes\n//         </button>\n\n//         {sortedJokes.map(j => (\n//           <Joke text={j.joke} key={j.id} id={j.id} votes={j.votes} vote={vote} />\n//         ))}\n//       </div>\n//     );\n//   }\n\n//   return null;\n\n// }\n\n// export default JokeList;\n","import React from \"react\";\nimport JokeList from \"./JokeList\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <JokeList />\n    </div>\n  );\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}